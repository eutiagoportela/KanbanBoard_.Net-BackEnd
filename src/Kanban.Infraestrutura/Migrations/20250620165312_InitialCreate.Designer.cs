// <auto-generated />
using System;
using Kanban.Infraestrutura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kanban.Infraestrutura.Migrations
{
    [DbContext(typeof(KanbanDbContext))]
    [Migration("20250620165312_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kanban.Dominio.Entidades.Tarefas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Ordem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao");

                    b.HasIndex("Status");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("UsuarioId", "DataVencimento");

                    b.HasIndex("UsuarioId", "Status");

                    b.ToTable("Tarefas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Instalar e configurar todas as ferramentas necessárias para desenvolvimento",
                            Ordem = 1,
                            Status = 3,
                            Titulo = "Configurar ambiente de desenvolvimento",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            DataAtualizacao = new DateTime(2024, 1, 2, 9, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 2, 9, 0, 0, 0, DateTimeKind.Utc),
                            DataVencimento = new DateTime(2025, 6, 23, 16, 45, 0, 0, DateTimeKind.Utc),
                            Descricao = "Criar sistema de autenticação com tokens JWT para segurança da API",
                            Ordem = 1,
                            Status = 2,
                            Titulo = "Implementar autenticação JWT",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            DataAtualizacao = new DateTime(2024, 1, 2, 14, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 2, 14, 0, 0, 0, DateTimeKind.Utc),
                            DataVencimento = new DateTime(2025, 6, 27, 16, 45, 0, 0, DateTimeKind.Utc),
                            Descricao = "Desenvolver a interface do usuário para o quadro Kanban com drag and drop",
                            Ordem = 1,
                            Status = 1,
                            Titulo = "Criar interface do Kanban Board",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 4,
                            DataAtualizacao = new DateTime(2024, 1, 3, 11, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 3, 11, 0, 0, 0, DateTimeKind.Utc),
                            DataVencimento = new DateTime(2025, 6, 25, 16, 45, 0, 0, DateTimeKind.Utc),
                            Descricao = "Criar testes automatizados para garantir qualidade do código",
                            Ordem = 2,
                            Status = 1,
                            Titulo = "Escrever testes unitários",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 5,
                            DataAtualizacao = new DateTime(2024, 1, 3, 16, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 3, 16, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Atualizar e melhorar a documentação técnica da aplicação",
                            Ordem = 1,
                            Status = 1,
                            Titulo = "Revisar documentação da API",
                            UsuarioId = 2
                        });
                });

            modelBuilder.Entity("Kanban.Dominio.Entidades.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@kanban.com",
                            Nome = "Admin",
                            SenhaHash = "HASH_ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            DataAtualizacao = new DateTime(2024, 1, 2, 9, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 2, 9, 0, 0, 0, DateTimeKind.Utc),
                            Email = "joao@kanban.com",
                            Nome = "João",
                            SenhaHash = "HASH_JOAO"
                        });
                });

            modelBuilder.Entity("Kanban.Dominio.Entidades.Tarefas", b =>
                {
                    b.HasOne("Kanban.Dominio.Entidades.Usuarios", "Usuario")
                        .WithMany("Tarefas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Kanban.Dominio.Entidades.Usuarios", b =>
                {
                    b.Navigation("Tarefas");
                });
#pragma warning restore 612, 618
        }
    }
}
